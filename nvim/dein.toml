[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'LeafCage/yankround.vim.git'
hook_add = '''
  nmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
  let g:yankround_max_history = 50
  nnoremap <silent>g<C-p> :<C-u>CtrlPYankRound<CR>
'''

[[plugins]]
repo = 'rhysd/clever-f.vim'

[[plugins]]
repo = 'unblevable/quick-scope'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'vim-scripts/quickhl.vim'
hook_add = '''
  nmap qj <Plug>(quickhl-manual-this)
  xmap qj <Plug>(quickhl-manual-this)
  nmap qJ <Plug>(quickhl-manual-reset)
  xmap qJ <Plug>(quickhl-manual-reset)
  nmap ql <Plug>(quickhl-cword-toggle)
'''

[[plugins]]
repo = 'rhysd/migemo-search.vim'
if = "executable('cmigemo')"
hook_add = '''
  cnoremap <expr><CR> migemosearch#replace_search_word()."\<CR>"
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
merged = 0
hook_add = '''
  " Don't pass messages to |ins-completion-menu|.
  set shortmess+=c

  " use <tab> for trigger completion and navigate to the next complete item
  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
  endfunction

  inoremap <silent><expr> <Tab>
    \ pumvisible() ? coc#_select_confirm() :
    \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
    \ <SID>check_back_space() ? "\<Tab>" :
    \ coc#refresh()

  let g:coc_snippet_next = '<tab>'

  " Use <c-space> to trigger completion.
  inoremap <silent><expr> <c-space> coc#refresh()

  " GoTo code navigation.
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window.
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Formatting selected code.
  xmap <leader>f <Plug>(coc-format-selected)
  nmap <leader>f <Plug>(coc-format-selected)
'''
hook_post_update = '''
  CocInstall coc-json
  CocInstall coc-go
  CocInstall coc-python
  CocInstall coc-snippets
  CocInstall coc-tabnine
  CocInstall coc-tsserver
  CocInstall coc-yaml
'''

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
  " fix
  let g:ale_fix_on_save = 1
  let g:ale_fixers = {
    \ '*':          ['remove_trailing_lines', 'trim_whitespace'],
    \ 'css':        ['prettier'],
    \ 'go':         ['goimports'],
    \ 'javascript': ['eslint', 'prettier'],
    \ 'json':       ['prettier'],
    \ 'html':       ['prettier'],
    \ 'markdown':   ['prettier'],
    \ 'python':     ['isort', 'black'],
    \ 'ruby':       ['rubocop'],
    \ 'terraform':  ['terraform'],
    \ 'typescript': ['eslint', 'prettier'],
  \}

  " lint
  let g:ale_linters = {
    \ 'bash':       ['shellcheck'],
    \ 'dockerfile': ['hadolint'],
    \ 'go':         ['gofmt', 'golint'],
    \ 'json':       ['jsonlint'],
    \ 'python':     ['flake8', 'mypy'],
    \ 'ruby':       ['rubocop'],
    \ 'sh':         ['shellcheck'],
    \ 'terraform':  ['tflint'],
    \ 'yaml':       ['yamllint'],
  \ }
  let g:ale_lint_delay = 400
  let g:ale_lint_on_text_changed = 'never'

  " python
  let g:ale_python_mypy_options = '--ignore-missing-imports'

  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_warning_str = 'W'
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  let g:ale_sign_warning = '⚠'
  let g:ale_sign_error = '✖'
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
    \ 'colorscheme': 'landscape',
    \ 'mode_map': {'c': 'NORMAL'},
    \ 'active': {
    \   'left': [
    \     ['mode', 'paste'],
    \     ['gitbranch', 'readonly', 'filename', 'cocstatus', 'currentfunction'],
    \     ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok'],
    \   ]
    \ },
    \ 'component_function': {
    \   'readonly': 'LightlineReadonly',
    \   'filename': 'LightlineFilename',
    \   'fileformat': 'LightlineFileformat',
    \   'filetype': 'LightlineFiletype',
    \   'fileencoding': 'LightlineFileencoding',
    \   'mode': 'LightlineMode',
    \   'gitbranch': 'LightlineFugitive',
    \   'cocstatus': 'coc#status',
    \   'currentfunction': 'CocCurrentFunction',
    \ },
    \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
    \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
    \ }

  function! LightlineReadonly()
    return &readonly && &filetype !=# 'help' ? "\uf023" : ''
  endfunction

  function! LightlineFilename()
    let filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
    let modified = &modified ? ' +' : ''
    return filename . modified
  endfunction

  function! LightlineFugitive()
    if exists('*FugitiveHead')
      let branch = FugitiveHead()
      return branch !=# '' ? "\ue0a0 ".branch : ''
    endif
    return ''
  endfunction

  function! LightlineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! LightlineFiletype()
    return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
  endfunction

  function! LightlineFileencoding()
    return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
  endfunction

  function! LightlineMode()
    return winwidth(0) > 60 ? lightline#mode() : ''
  endfunction

  function! CocCurrentFunction()
      return get(b:, 'coc_current_function', '')
  endfunction
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['ale', 'lightline.vim']
hook_add = '''
  let g:lightline.component_expand = {
    \   'linter_checking': 'lightline#ale#checking',
    \   'linter_warnings': 'lightline#ale#warnings',
    \   'linter_errors': 'lightline#ale#errors',
    \   'linter_ok': 'lightline#ale#ok',
    \ }
  let g:lightline.component_type = {
    \   'linter_checking': 'left',
    \   'linter_warnings': 'warning',
    \   'linter_errors': 'error',
    \   'linter_ok': 'left',
    \ }
  let g:lightline#ale#indicator_checking = "\uf110 "
  let g:lightline#ale#indicator_warnings = "\uf071 "
  let g:lightline#ale#indicator_errors = "\uf05e "
  let g:lightline#ale#indicator_ok = "\uf00c "
'''

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'tomasr/molokai'
