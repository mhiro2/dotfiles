[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'rhysd/accelerated-jk'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>j <Plug>(accelerated_jk_gj)
  nmap <silent>k <Plug>(accelerated_jk_gk)
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
hook_add = '''
  nnoremap <silent>zo :<C-u>Deol -split=floating<CR>
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['defx-git', 'defx-icons']
on_cmd = 'Defx'
hook_add = '''
  nnoremap <silent>zf :<C-u>Defx<CR>
  nnoremap <silent>zr :<C-u>Defx -resume<CR>

  autocmd FileType defx call s:defx_my_settings()
  function! s:defx_my_settings() abort
    " Define mappings
    nnoremap <silent><buffer><expr> c       defx#do_action('copy')
    nnoremap <silent><buffer><expr> cd      defx#do_action('change_vim_cwd')
    nnoremap <silent><buffer><expr> d       defx#do_action('remove')
    nnoremap <silent><buffer><expr> h       defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> j       line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k       line('.') == 1         ? 'G'  : 'k'
    nnoremap <silent><buffer><expr> l       defx#do_action('open')
    nnoremap <silent><buffer><expr> m       defx#do_action('move')
    nnoremap <silent><buffer><expr> o       defx#do_action('open_or_close_tree')
    nnoremap <silent><buffer><expr> p       defx#do_action('paste')
    nnoremap <silent><buffer><expr> q       defx#do_action('quit')
    nnoremap <silent><buffer><expr> r       defx#do_action('rename')
    nnoremap <silent><buffer><expr> x       defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> C       defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
    nnoremap <silent><buffer><expr> E       defx#do_action('open', 'vsplit')
    nnoremap <silent><buffer><expr> P       defx#do_action('open', 'pedit')
    nnoremap <silent><buffer><expr> K       defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> M       defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> N       defx#do_action('new_file')
    nnoremap <silent><buffer><expr> S       defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> !       defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> yy      defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> .       defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ;       defx#do_action('repeat')
    nnoremap <silent><buffer><expr> ~       defx#do_action('cd')
    nnoremap <silent><buffer><expr> <C-c>   defx#do_action('quit')
    nnoremap <silent><buffer><expr> <C-g>   defx#do_action('print')
    nnoremap <silent><buffer><expr> <C-g>   defx#do_action('print')
    nnoremap <silent><buffer><expr> <CR>    defx#do_action('open')
    nnoremap <silent><buffer><expr> <BS>    defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> *       defx#do_action('toggle_select_all')
  endfunction
'''
hook_source = '''
  call defx#custom#option('_', {
    \ 'columns': 'indent:git:icons:mark:filename:type:size',
    \ 'direction': 'topleft',
    \ 'show_ignored_files': 1,
    \ })

  call defx#custom#column('filename', {
    \ 'min_width': 40,
    \ 'max_width': 40,
    \ })

  call defx#custom#column('mark', {
    \ 'readonly_icon': '✗',
    \ 'selected_icon': '✓',
    \ })
'''

[[plugins]]
repo = 'kristijanhusak/defx-git'

[[plugins]]
repo ='kristijanhusak/defx-icons'

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['fruzzy']
on_cmd = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord', 'DeniteProjectDir']
on_func = ['denite#']
hook_add = '''
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> a       denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> d       denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> i       denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> p       denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q       denite#do_map('quit')
    nnoremap <silent><buffer><expr> s       denite#do_map('do_action', 'split')
    nnoremap <silent><buffer><expr> v       denite#do_map('do_action', 'vsplit')
    nnoremap <silent><buffer><expr> <C-c>   denite#do_map('quit')
    nnoremap <silent><buffer><expr> <CR>    denite#do_map('do_action')
    nnoremap <silent><buffer><expr> <Tab>   denite#do_map('choose_action')
    nnoremap <silent><buffer><expr> <Space> denite#do_map('toggle_select').'j'
  endfunction

  autocmd FileType denite-filter call s:denite_filter_my_setting()
  function! s:denite_filter_my_setting() abort
    inoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
    nnoremap <silent><buffer><expr> <C-c> denite#do_map('quit')
    inoremap <silent><buffer><expr> <BS>  denite#do_map('move_up_path')
  endfunction

  noremap z/   :<C-u>Denite grep<CR>
  noremap zb   :<C-u>Denite buffer<CR>
  noremap ze   :<C-u>Denite file/rec buffer<CR>
  noremap zg   :<C-u>Denite ghq<CR>
  noremap zgl  :<C-u>Denite gitlog<CR>
  noremap zgL  :<C-u>Denite gitlog:all<CR>
  noremap zgst :<C-u>Denite gitstatus<CR>
  noremap zj   :<C-u>Denite -resume -cursor-pos=+1 -immediately<CR>
  noremap zk   :<C-u>Denite -resume -cursor-pos=-1 -immediately<CR>
  noremap zl   :<C-u>Denite line<CR>
  noremap zo   :<C-u>Denite outline<CR>
  noremap zu   :<C-u>Denite -resume<CR>
  noremap zy   :<C-u>Denite neoyank<CR>
'''
hook_source = '''
  " Use ripgrep on grep source
  call denite#custom#var('grep', 'command', ['rg'])
  call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep', '--no-heading'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])

  " Use fd for finding files
  if executable('fd')
    let file_rec_cmd = ['fd', '--follow', '--hidden', '--exclude', '.git', '.*']
  else
    let file_rec_cmd = ['rg', '--files', '--glob', '!.git']
  endif
  call denite#custom#var('file/rec', 'command', file_rec_cmd)

  call denite#custom#option('_', {
    \ 'matchers': 'matcher/fruzzy',
    \ 'prompt': '❯ ',
    \ 'split': 'floating',
    \ 'start_filter': v:true,
    \ 'statusline': v:false,
    \ })
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = 'denite.nvim'

[[plugins]]
repo      = 'raghur/fruzzy'
on_source = ['denite.nvim']
hook_add  = '''
  let g:fruzzy#usenative = 1
  let g:fruzzy#sortonempty = 0
'''
hook_post_update = 'call fruzzy#install()'

[[plugins]]
repo = 'Jagua/vim-denite-ghq'
on_source = ['denite.nvim']

[[plugins]]
repo = 'chemzqm/denite-git'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
if = "has('nvim')"
on_i = 1
hook_source = '''
  let g:deoplete#enable_at_startup = 1

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
  endfunction

  inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ deoplete#manual_complete()
  inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
'''

[[plugins]]
repo = 'tweekmonster/deoplete-clang2'
depends = 'deoplete.nvim'
on_ft = ['c', 'cpp']
hook_source = '''
  autocmd FileType c,cpp let b:clang2_orig_maps = {}
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
depends = 'deoplete.nvim'
on_ft = 'python'

[[plugins]]
repo = 'Shougo/deoplete-rct'
depends = 'deoplete.nvim'
on_ft = 'ruby'

[[plugins]]
repo = 'zchee/deoplete-go'
depends = 'deoplete.nvim'
on_ft = 'go'
build = 'make'
hook_source = '''
  let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
  let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
  let g:deoplete#sources#go#use_cache = 1
  let g:deoplete#sources#go#json_directory = '~/.cache/deoplete/go/$GOOS_$GOARCH'
'''

[[plugins]]
repo = 'Shougo/neosnippet'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'tyru/caw.vim'
on_map = {nxv = '<plug>'}
hook_add = '''
  nmap gc <plug>(caw:prefix)
  xmap gc <plug>(caw:prefix)
  nmap gcc <Plug>(caw:hatpos:toggle)
  xmap gcc <Plug>(caw:hatpos:toggle)
  vmap gcc <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'rhysd/vim-operator-surround'
depends = 'vim-operator-user'
on_map = {n = '<Plug>'}
hook_add = '''
  nmap <silent>sa <Plug>(operator-surround-append)a
  nmap <silent>sd <Plug>(operator-surround-delete)a
  nmap <silent>sr <Plug>(operator-surround-replace)a
  nmap <silent>sc <Plug>(operator-surround-replace)a
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
on_ft = 'python'
hook_soure = '''
  let g:indent_guides_enable_on_vim_startup=1
  let g:indent_guides_start_level=2
  let g:indent_guides_guide_size=1
  let g:indent_guides_space_guides=1
  let g:indent_guides_auto_colors = 0
  hi IndentGuidesOdd  ctermbg=235
  hi IndentGuidesEven ctermbg=237
'''

[[plugins]]
repo = 'tpope/vim-endwise'
on_ft = 'ruby'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_source = '''
  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_fields = 1
  let g:go_highlight_types = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_build_constraints = 1
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'

[[plugins]]
repo = 'hotwatermorning/auto-git-diff'
on_ft = 'gitrebase'
